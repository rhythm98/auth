
services:
  # PostgreSQL Database
  # winpty docker exec -it db-container psql -U postgres -c "CREATE DATABASE auth_db;"
  # winpty docker exec -it db-container psql -U postgres -c "CREATE DATABASE keycloak;"
  postgres:
    image: postgres:latest
    container_name: db-container
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: auth_db
    ports:
      - "5432:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Keycloak for authentication and identity management
  keycloak:
    image: quay.io/keycloak/keycloak:26.1.3
    container_name: keycloak-container
    command: 
    - start-dev # "start" for prod-mode, expects a hostname to be set up and an HTTPS/TLS setup to be available when started.
    # - --import-realm
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/auth_db
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
      
      KC_FEATURES: token-exchange,admin-fine-grained-authz
      
      KC_HTTP_RELATIVE_PATH: /auth
      # KC_HTTP_RELATIVE_PATH: /
      # KC_HTTP_PORT: 8080
      # KC_HOSTNAME_URL: http://localhost:8080
      # KC_HOSTNAME_ADMIN_URL: http://localhost:8080
      # KC_HOSTNAME_STRICT_BACKCHANNEL: true
      # KC_HTTP_ENABLED: true

      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
    # extra_hosts:
    # - "host.docker.internal:host-gateway"
    ports:
      - "8180:8080"
    # volumes:
    # - ./keycloak/:/opt/keycloak/data/import/
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/auth/"]
    #   test: ['CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8080/auth/health/live']
      interval: 30s
      timeout: 10s
      retries: 3

  # # Spring Boot backend
  # backend:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   container_name: auth-backend
  #   environment:
  #     SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/auth_app
  #     SPRING_DATASOURCE_USERNAME: postgres
  #     SPRING_DATASOURCE_PASSWORD: postgres
  #     KEYCLOAK_AUTH_SERVER_URL: http://keycloak:8080/auth
  #     KEYCLOAK_REALM: your-realm
  #     KEYCLOAK_RESOURCE: your-client-id
  #     KEYCLOAK_CREDENTIALS_SECRET: your-client-secret
  #     APP_CORS_ALLOWED_ORIGINS: http://localhost:3000
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     keycloak:
  #       condition: service_healthy
  #     postgres:
  #       condition: service_healthy

  # # React frontend
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: auth-frontend
  #   environment:
  #     REACT_APP_API_URL: http://localhost:8080/api
  #     REACT_APP_KEYCLOAK_URL: http://localhost:8180/auth
  #   ports:
  #     - "3000:80"
  #   depends_on:
  #     - backend

volumes:
  postgres-data: